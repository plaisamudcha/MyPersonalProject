// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "windows", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String         @unique
  password     String
  createdAt    DateTime       @default(now())
  role         RoleType       @default(PATIENT)
  doctor       Doctor?
  patient      Patient?
  refreshToken RefreshToken[]
}

model Patient {
  id           Int           @id @default(autoincrement())
  userId       Int           @unique
  dob          DateTime
  gender       Gender        @default(MALE)
  phone        String
  profileImage String?
  user         User          @relation(fields: [userId], references: [id])
  appointments Appointment[]
  payment      Payment[]
  deletedAt    DateTime?
}

model Doctor {
  id             Int           @id @default(autoincrement())
  specialization DoctorType    @default(GENERAL_PRACTICE)
  user           User          @relation(fields: [userId], references: [id])
  userId         Int           @unique
  profileImage   String?
  appointments   Appointment[]
  deletedAt      DateTime?
}

model Appointment {
  id        Int               @id @default(autoincrement())
  date      DateTime
  time      String
  status    AppointmentStatus @default(SCHEDULED)
  updatedAt DateTime          @updatedAt

  doctor        Doctor         @relation(fields: [doctorId], references: [id])
  doctorId      Int
  patient       Patient        @relation(fields: [patientId], references: [id])
  patientId     Int
  medicalRecord MedicalRecord?
  payment       Payment?
}

model MedicalRecord {
  id            Int            @id @default(autoincrement())
  diagnosis     String
  notes         String
  createdAt     DateTime       @default(now())
  appointment   Appointment    @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId Int            @unique
  prescription  Prescription[]
}

model Prescription {
  id          Int     @id @default(autoincrement())
  dosage      String
  duration    String
  createStock Boolean @default(false)

  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  medicalRecordId Int
  medicine        Medicine?     @relation(fields: [medicineId], references: [id])
  medicineId      Int?
}

model Medicine {
  id               Int                @id @default(autoincrement())
  name             String
  description      String
  stock            Int                @default(0)
  pricePerUnit     Float
  form             MedicineForm
  prescriptions    Prescription[]
  pharmacyStockLog PharmacyStockLog[]
}

model PharmacyStockLog {
  id         Int       @id @default(autoincrement())
  change     Int
  reason     String
  changeAt   DateTime  @default(now())
  medicine   Medicine? @relation(fields: [medicineId], references: [id])
  medicineId Int?
}

model Payment {
  id            Int           @id @default(autoincrement())
  amount        Float
  status        PaymentStatus @default(PENDING)
  paidAt        DateTime?
  paymentMethod PaymentMethod
  patient       Patient       @relation(fields: [patientId], references: [id])
  patientId     Int
  appointment   Appointment   @relation(fields: [appointmentId], references: [id])
  appointmentId Int           @unique
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

enum RoleType {
  ADMIN
  DOCTOR
  PATIENT
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELED
}

enum Gender {
  MALE
  FEMALE
}

enum DoctorType {
  GENERAL_PRACTICE
  INTERNAL_MEDICINE
  PEDIATRICS
  OBSTETRICS_GYNECOLOGY
  SURGERY
  ORTHOPEDIC
  CARDIOLOGY
  NEUROLOGY
  DERMATOLOGY
  OPHTHALMOLOGY
  PSYCHIATRY
  ENT
  ANESTHESIOLOGY
  EMERGENCY_MEDICINE
  RADIOLOGY
  ONCOLOGY
  UROLOGY
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}

enum MedicineForm {
  TABLET
  SYRUP
  CAPSULE
  INJECTION
  CREAM
}

enum PaymentMethod {
  CASH
  CREDITCARD
  MOBILEBANKING
  PROMPTPAY
}

enum Timeschedule {
  HOUR_08_00 @map("08:00")
  HOUR_08_30 @map("08:30")
  HOUR_09_00 @map("09:00")
  HOUR_09_30 @map("09:30")
  HOUR_10_00 @map("10:00")
  HOUR_10_30 @map("10:30")
  HOUR_11_00 @map("11:00")
  HOUR_11_30 @map("11:30")
  HOUR_12_00 @map("12:00")
  HOUR_12_30 @map("12:30")
  HOUR_13_00 @map("13:00")
  HOUR_13_30 @map("13:30")
  HOUR_14_00 @map("14:00")
  HOUR_14_30 @map("14:30")
  HOUR_15_00 @map("15:00")
  HOUR_15_30 @map("15:30")
  HOUR_16_00 @map("16:00")
  HOUR_16_30 @map("16:30")
}
